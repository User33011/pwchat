# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\w2.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# Мать ебал провайдера и весь Tele2 вертел на хую, аминь!
from PyQt5 import QtCore, QtGui, QtWidgets
import re
import base64
import sys
from datetime import datetime

from PyQt5.QtWidgets import QProgressBar

opened = False
dec = []
class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        #бит мап обявить
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(810, 620)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.mainWindow = QtWidgets.QTextEdit(self.centralwidget)
        self.mainWindow.setGeometry(QtCore.QRect(20, 50, 771, 511))
        self.mainWindow.setReadOnly(True)
        self.mainWindow.setObjectName("mainWindow")
        self.developers = QtWidgets.QLabel(self.centralwidget)
        self.developers.setGeometry(QtCore.QRect(660, 560, 200, 41))
        self.developers.setObjectName("developers")
        self.version = QtWidgets.QLabel(self.centralwidget)
        self.version.setGeometry(QtCore.QRect(746, 575, 200, 41))
        self.version.setObjectName("version")
        self.senderFind = QtWidgets.QPushButton(self.centralwidget)
        self.senderFind.setGeometry(QtCore.QRect(20, 10, 101, 23))
        self.senderFind.setObjectName("senderFind")
        self.destinatorFind = QtWidgets.QPushButton(self.centralwidget)
        self.destinatorFind.setGeometry(QtCore.QRect(130, 10, 101, 23))
        self.destinatorFind.setObjectName("destinatorFind")
        self.openFile = QtWidgets.QPushButton(self.centralwidget)
        self.openFile.setGeometry(QtCore.QRect(582, 10, 101, 23))
        self.openFile.setObjectName("openFile")
        self.dateSearch = QtWidgets.QPushButton(self.centralwidget)
        self.dateSearch.setGeometry(QtCore.QRect(240, 10, 101, 23))
        self.dateSearch.setObjectName("openFile")
        self.GM_search = QtWidgets.QPushButton(self.centralwidget)
        self.GM_search.setGeometry(QtCore.QRect(458, 10, 33, 23))
        self.GM_search.setObjectName("GM_search")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 810, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.menuFile.addAction(self.actionOpen)
        self.menubar.addAction(self.menuFile.menuAction())
        self.createFile = QtWidgets.QPushButton(self.centralwidget)
        self.createFile.setGeometry(QtCore.QRect(691, 10, 100, 23))
        self.createFile.setObjectName("CreateFile")
        self.pexit = QtWidgets.QPushButton(self.centralwidget)
        self.pexit.setGeometry(QtCore.QRect(360, 580, 100, 23))
        self.pexit.setObjectName("exit")
        self.fchat = QtWidgets.QPushButton(self.centralwidget)
        self.fchat.setGeometry(QtCore.QRect(350, 10, 100, 23))
        self.fchat.setObjectName("fchat")
      #  self.pbar = QProgressBar(self.centralwidget)
      #  self.pbar.setGeometry(30, 40, 200, 25)
      #  self.pbar.setObjectName("process")

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.add_functions()

    @QtCore.pyqtSlot()
    def action_open_chat(self):
        action = self.sender()
        print(action)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "PWChat v0.0.2a"))
        self.mainWindow.setPlaceholderText(_translate("MainWindow", "Выберите файл"))
        self.developers.setText(_translate("MainWindow", "Devs: FlOopS & painstyle01"))
        self.version.setText(_translate("MainWindow", "ver:0.0.3"))
        self.senderFind.setText(_translate("MainWindow", "Отправитель"))
        self.destinatorFind.setText(_translate("MainWindow", "Получатель"))
        self.dateSearch.setText(_translate("MainWindow", "Дата"))
        self.GM_search.setText(_translate("MainWindow", "GM"))
        self.menuFile.setTitle(_translate("MainWindow", ""))
        self.actionOpen.setText(_translate("MainWindow", ""))
        self.openFile.setText(_translate("MainWindow","Открыть лог"))
        self.createFile.setText(_translate("MainWindow", "Записать в txt"))
        self.pexit.setText(_translate("MainWindow", "Шығу"))
        self.fchat.setText(_translate("MainWindow", "Поиск"))
      #  self.timer.timeout.connect(self.handleTimer)
      #  self.timer.start(1000)

    def add_functions(self):
        self.GM_search.clicked.connect(self.filter_gm)
        self.senderFind.clicked.connect(self.dialogSender)
        self.destinatorFind.clicked.connect(self.dialogFinder)
        self.openFile.clicked.connect(self.openfile)
        self.dateSearch.clicked.connect(self.searchDate)
        self.createFile.clicked.connect(self.createfile)
        self.pexit.clicked.connect(self.exit)
        self.fchat.clicked.connect(self.findc)
      #  self.pbar.setValue(self.handleTimer)

    def handleTimer(self):
        value = self.pbar.value()
        if value < 100:
            value = value + 1
            self.pbar.setValue(value)
        else:
            self.timer.stop()

    def findc(self):
        if opened == False:
            self.openfile()
        else:
            text, okPressed = QtWidgets.QInputDialog.getText(None,
                                                             "Найти",
                                                             "Введите слово",
                                                             QtWidgets.QLineEdit.Normal,
                                                             "")
            if okPressed and text != '':
                self.mainWindow.setText("")
                for string in dec:
                    search = re.search(r"Сообщение: {}".format(text), string)
                    if search is not None:
                        self.mainWindow.append(string)
                    else:
                        pass

    def searchDate(self):
        if opened == False:
            self.openfile()
        else:
            text, okPressed = QtWidgets.QInputDialog.getText(None,
                                                             "Найти по дате",
                                                             "Дата формата (ГГГГ-ММ-ДД)",
                                                             QtWidgets.QLineEdit.Normal,
                                                             "")
            if okPressed and text != '':
                self.mainWindow.setText("")
                for string in dec:
                    search = re.search(r"Дата: {}".format(text), string)
                    if search is not None:
                        self.mainWindow.append(string)
                    else:
                        pass

    def filter_gm(self):
        if opened == False:
            self.openfile()
        else:
            self.mainWindow.setText("")
            print("Выполняю поиск ГМа")
            for l in dec:
                search = re.search(r"GM★", l)
                if search is not None:
                    self.mainWindow.append(l)
                else:
                    pass

    def dialogSender(self):
        if opened == False:
            self.openfile()
        else:
            text, okPressed = QtWidgets.QInputDialog.getText(None,
                                                             "Отсортировать по отправителю",
                                                             "Айди отправителя:",
                                                             QtWidgets.QLineEdit.Normal,
                                                             "")
            if okPressed and text != '':
                self.mainWindow.setText("")
                print("Выполняю поиск по отправителю. ID {}".format(text))
                for string in dec:
                    search = re.search(r"Отправитель {}".format(text), string)
                    if search is not None:
                        self.mainWindow.append(string)
                    else:
                        pass

    def dialogFinder(self):
        if opened == False:
            self.openfile()
        else:
            text, okPressed = QtWidgets.QInputDialog.getText(None,
                                                             "Отсортировать по получателю",
                                                             "Айди получателя:",
                                                             QtWidgets.QLineEdit.Normal,
                                                             "")
            if okPressed and text != '':
                self.mainWindow.setText("")
                print("Выполняю поиск по получателю. ID {}".format(text))
                for string in dec:
                    search = re.search(r"Получатель {}".format(text), string)
                    if search is not None:
                        self.mainWindow.append(string)
                    else:
                        pass

    def openfile(self):
        file_path = QtWidgets.QFileDialog.getOpenFileName(caption="Open .chat file", filter="*.chat")[0]
        f = open(file_path, "r", encoding="utf-8")
        global dec
        try:
            file = f.read()
            l = file.split("\n")
            print("Выполняю дешифровку файла...")
            for line in l:
                try:
                    regex = re.split(r"msg=", line)
                    resolt = base64.b64decode(regex[1])

                    dec.append("Дата: " + regex[0]  # append добавление в конец массива
                               .replace("Whisper:", "ПМ:")
                               .replace("Chat:", "Мир:")
                               .replace("Guild:", "Клан:")
                               .replace("gfaction:", "")
                               .replace("emilypw", "")
                               .replace("glinkd-1:", "")
                               .replace("chat :", "")
                               .replace("instance-1", "")
                               .replace("src=-1", "GM★ ")
                               .replace("src=", "Отправитель ")
                               .replace("dst=", "Получатель ")
                               + "Сообщение: " + resolt.decode("utf-16"))
                except:
                    for l in dec:
                        self.mainWindow.append(l)
                    break
        except Exception as e:
            print(e)
        global opened
        opened = True

    def createfile(self):
        if opened == False:
            self.openfile()

        else:
            now = datetime.now()
            current_time = now.strftime("%H.%M.%S")
            print(type(current_time))
            try:
                w = open("ChatLog {}.txt".format(current_time), "w", encoding="utf-16")
                for lines in dec:
                    w.write(lines + "\n")
            except:
                pass

    def exit(self):
        sys.exit(app.exec_())

if __name__ == '__main__':
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    MainWindow.setWindowIcon(QtGui.QIcon('favicon.ico'))
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
